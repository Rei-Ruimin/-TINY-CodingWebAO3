let terminal_html = `<!DOCTYPE html>
<html>

<body>
    <pre class="language-js"><code class="language-js"><span class="highlight-line"><span class="token comment">// Code for displaying &lt;extensionDir&gt;/images/myimage.png:</span></span><br><mark class="highlight-line highlight-line-active"><span class="token keyword">var</span> imgURL <span class="token operator">=</span> chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token string">"images/myimage.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></mark><br><span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"someImage"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgURL<span class="token punctuation">;</span></span></code>
    </pre>

    <div class="aside aside--note">
        <p>Not only does each extension run in its own isolated world, but content scripts and the web page do too. This means that none of these (web page, content scripts, and any running extensions) can access the context and variables of the others.</p>
    </div>

    <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> greeting <span class="token operator">=</span> <span class="token string">"hola, "</span><span class="token punctuation">;</span><br><span class="token keyword">var</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mybutton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>button<span class="token punctuation">.</span>person_name <span class="token operator">=</span> <span class="token string">"Roberto"</span><span class="token punctuation">;</span><br>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><br>  <span class="token function">alert</span><span class="token punctuation">(</span>greeting <span class="token operator">+</span> button<span class="token punctuation">.</span>person_name <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><br><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
    </pre>

    <div class="aside aside--note">
        <p>An <em>isolated world</em> is a private execution environment that isn't accessible to the page or other extensions. A practical consequence of this isolation is that JavaScript variables in an extension's content scripts are not visible to the host page or other extension content scripts. The concept was originally introduced with the initial launch of Chrome, providing isolation for browser tabs.</p>
     </div>

    <p>Content Scripts can be injected <a href="#static-declarative">declared statically</a> or <a href="#programmatic">programmatically injected</a>.
    </p>

    <p>Statically declared scripts are registered in the manifest under the <code>"content_scripts"</code> field. They can include JavaScript files, CSS files, or both. All auto-run content scripts must specify <a href="/docs/extensions/mv3/match_patterns/">match patterns</a>.
    </p>

    <pre class="language-js"><code class="language-js"><span class="token comment">//// content-script.js ////</span><br>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'orange'</span><span class="token punctuation">;</span></code>
    </pre>

    <pre class="language-js"><code class="language-js"><span class="token comment">//// background.js ////</span><br><span class="token keyword">function</span> <span class="token function">injectedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'orange'</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br>chrome<span class="token punctuation">.</span>action<span class="token punctuation">.</span>onClicked<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><br>  chrome<span class="token punctuation">.</span>scripting<span class="token punctuation">.</span><span class="token function">executeScript</span><span class="token punctuation">(</span><span class="token punctuation">{</span><br>    target<span class="token operator">:</span> <span class="token punctuation">{</span> tabId<span class="token operator">:</span> tab<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token keyword">function</span><span class="token operator">:</span> injectedFunction<br>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>   
    </pre>

    <pre class="language-js"><code class="language-js"><span class="highlight-line">chrome<span class="token punctuation">.</span>scripting<span class="token punctuation">.</span><span class="token function">registerContentScript</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span><br><mark class="highlight-line highlight-line-active">  matches<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"http://*.nytimes.com/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span></mark><br><span class="highlight-line">  exclude_matches<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*://*/*business*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  js<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"contentScript.js"</span><span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code> 
    </pre>
    

    <pre class="language-js"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mybutton<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><br>    <span class="token keyword">var</span> greeting <span class="token operator">=</span> <span class="token string">"hello, "</span><span class="token punctuation">;</span><br>    <span class="token keyword">var</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mybutton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    button<span class="token punctuation">.</span>person_name <span class="token operator">=</span> <span class="token string">"Bob"</span><span class="token punctuation">;</span><br>    button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><br>      <span class="token function">alert</span><span class="token punctuation">(</span>greeting <span class="token operator">+</span> button<span class="token punctuation">.</span>person_name <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><br>    <span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code>  
    </pre>

    <pre class="language-js"><code class="language-js"><span class="highlight-line">chrome<span class="token punctuation">.</span>scripting<span class="token punctuation">.</span><span class="token function">registerContentScript</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  matches<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'http://*.nytimes.com/*'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><mark class="highlight-line highlight-line-active">  exclude_globs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'*science*'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></mark><br><span class="highlight-line">  js<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'contentScript.js'</span><span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code>
    </pre>

</body>

</html>`;

chrome.runtime.onInstalled.addListener(() => {
  chrome.storage.local.set({terminal_html}, ()=>{
    console.log('saved');
  });
});
